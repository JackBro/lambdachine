# -*- Python -*-
# vim: set syntax=python:

# Configuration file for the 'lit' test runner.
import os.path

#------------------------------------------------------------------#
# Helper Functions 
#------------------------------------------------------------------#
# Expand paths relative to the config file to absolute paths
test_dir   = os.path.abspath(os.path.dirname(__file__))
def expand_rel_path(rel):
  return os.path.abspath(test_dir + "/" + rel)

#------------------------------------------------------------------#
# Common Lit Config
#------------------------------------------------------------------#
# name: The name of this test suite.
config.name = 'Lambdachine'

# suffixes: A list of file extensions to treat as test files.
config.suffixes = ['.hs', '.lhs']

# excludes: A list of directories to exclude
config.excludes = ['Exclude', 'base', 'ghc-prim', 'integer-gmp']

# testFormat: The test format to use to interpret tests.
config.test_format = lit.formats.ShTest()

# target_triple: Used by ShTest and TclTest formats for XFAIL checks.
# In the test file, you can specify
# XFAIL: x86_64
# to say the test should only fail on x86_64 platform
config.target_triple = 'x86_64-vm-ir'

# Add environment variables for (e.g. $HOME, $PATH)
config.environment = os.environ

# test_exec_root: 
# The path where tests are executed (default is the test suite root).
# Temporary files will be written here
config.test_exec_root = expand_rel_path("run")

#------------------------------------------------------------------#
# Lambdachine Config
#------------------------------------------------------------------#
# Lambdachine Executables 
config.LCC      = expand_rel_path("../lcc")
config.INTERP   = expand_rel_path("../interp")

# Lambdachine Flags
config.LCC_FLAGS    = "" # "--dump-bytecode "
config.INTERP_FLAGS = "-B" + expand_rel_path(".") + " "
config.COMPILE_BC   = True
config.BENCHMARK    = False

#------------------------------------------------------------------#
# User Config  
#------------------------------------------------------------------#
# Load user config if it exists. The user config can override/replace variables
# set here. We do this before adding the substitutions so that the updated
# values will be used.
user_cfg = expand_rel_path("lit.user.cfg")
if os.path.exists(user_cfg):
  lit.load_config(config, user_cfg)

#------------------------------------------------------------------#
# Standard Executables
#------------------------------------------------------------------#
# Define some standard variables for basic executables to use in the test files.

# bc: run the bytecode compiler
# vm: run the interpreter
# chk: run the filecheck utility
# %s: test file path
# %m: test module name
bc        = "%lcc %s"
vm        = "%interp %m"
chk       = "%filecheck %s"

# Define some standard combiations of basic executables. The connections
# between the programs are interperted the same as the shell.
# bc_vm:     bc && vm
# vm_chk:          vm | chk
# bc_vm_chk: bc && vm | chk
bc_vm     = bc + " && " + vm
vm_chk    = vm + " | " + chk
bc_vm_chk = bc + " && " + vm_chk

# We can skip compiling the bytecode if it is already there from an earlier run
# This can be helpful if you want to avoid the overhead of compiling the
# bytecode for each test run. For example, if your changes only effect the
# interperter.
if not config.COMPILE_BC:
  bc_vm_chk = vm_chk

# In benchmark mode we just run the vm, no need to generate the bytecode and
# check the result. This lets us collect performance numbers using the same
# tests that we use for correctness. The lit script supports automatic timing
# and multiple execution of tests.
if config.BENCHMARK:
  bc_vm_chk = vm

#------------------------------------------------------------------#
# Substitutions
#------------------------------------------------------------------#
# The substituions here will be expanded when they are encountered in a test
# file. The order they are inserted matters because they will be expanded in
# the order which they are found. This allows us to have earlier substitutions
# produce output containing variables that will be expanded later.
#
# Its important to add the longer substitutions first, otherwise the the %bc
# will match as a substring of %bc_vm_chk.
subs = [
  ('%bc_vm_chk', bc_vm_chk),
  ('%bc_vm', bc_vm),
  ('%bc',  bc),
  ('%vm',  vm),
  ('%chk', chk),
  ('%lcc', config.LCC + ' ' + config.LCC_FLAGS),
  ('%interp', config.INTERP + ' ' + config.INTERP_FLAGS),
  ('%filecheck', expand_rel_path("../utils/filecheck.py"))
]
for sub in subs: config.substitutions.append(sub)

#------------------------------------------------------------------#
# Dump configuration
#------------------------------------------------------------------#
if lit.debug:
  print("-"*30 + " config " + "-"*30)
  for k,v in config.substitutions:
    print(k +"="+ v)
  print("-"*30 + " config " + "-"*30)
